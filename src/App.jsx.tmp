import { useState, useMemo } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { AppButton, AppCard, AppInput, AppSelect, Divider } from './design-system'
import { monthKey } from './features/trades/utils.js'
import { useTradeStorage } from './hooks/useTradeStorage'
import Dashboard from './features/trades/Dashboard'
import TradeForm from './features/trades/TradeForm'
import TradesTable from './features/trades/TradesTable'
import ExitTradeForm from './features/trades/ExitTradeForm'
import EditTradeForm from './features/trades/EditTradeForm'

function Header({ settings, updateSettings, onImport, onExport }) {
  const [multiplier, setMultiplier] = useState(settings?.optionMultiplier ?? 100)

  const handleMultiplierChange = (e) => {
    const value = Number(e.target.value || 100)
    setMultiplier(value)
    updateSettings({ optionMultiplier: value })
  }

  return (
    <div className="flex flex-col gap-4">
      <div className="flex flex-wrap items-center justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold">ðŸ“ˆ Options & Stock Trade Tracker</h1>
          <p className="text-sm text-zinc-500">Track your options and stock trades with a beautiful dashboard.</p>
        </div>
      </div>
      <div className="flex flex-wrap gap-2 items-center">
        <AppButton variant="secondary" onClick={onImport}>Import</AppButton>
        <AppButton variant="secondary" onClick={onExport}>Export</AppButton>
        <div className="w-px h-6 bg-zinc-300 dark:bg-zinc-700 mx-1" />
        <details className="px-3 py-2 rounded-xl border border-zinc-200 dark:border-zinc-800">
          <summary className="cursor-pointer text-sm font-medium">Settings</summary>
          <div className="mt-3 grid grid-cols-1 md:grid-cols-12 gap-3 text-sm">
            <AppInput 
              id="mult" 
              label="Options Contract Multiplier" 
              type="number" 
              value={multiplier}
              onChange={handleMultiplierChange} 
              className="md:col-span-5" 
            />
            <p className="md:col-span-12 text-xs text-zinc-500">Common values: 100 (US), 10 (some markets). Set to 1 for Profit = Out âˆ’ In with no scaling.</p>
          </div>
        </details>
      </div>
    </div>
  )
}

export default function App() {
  const { 
    trades = [], 
    settings = { optionMultiplier: 100 }, 
    saveTrade = () => {}, 
    deleteTrade = () => {}, 
    updateSettings = () => {} 
  } = useTradeStorage() || {}
  
  const [filterMonth, setFilterMonth] = useState("")
  const [search, setSearch] = useState("")
  const [exiting, setExiting] = useState(null)
  const [editing, setEditing] = useState(null)

  const monthOptions = useMemo(() => {
    const months = new Set(trades.flatMap(t => [
      monthKey(t.entryDate),
      t.exitDate ? monthKey(t.exitDate) : null
    ]).filter(Boolean))
    return Array.from(months).sort().reverse()
  }, [trades])

  const filtered = useMemo(() => trades.filter(t => {
    const okMonth = filterMonth ? monthKey(t.entryDate) === filterMonth || 
      (t.exitDate && monthKey(t.exitDate) === filterMonth) : true

    const searchTerms = search.toLowerCase().split(' ').filter(Boolean)
    const searchText = `${t.symbol} ${t.strategy} ${t.type} ${t.notes || ''} ${
      t.type === 'option' ? `${t.option?.side} ${t.option?.strike} ${t.option?.expiration}` : ''
    }`.toLowerCase()
    
    return okMonth && searchTerms.every(term => searchText.includes(term))
  }), [trades, filterMonth, search])

  const handleImport = () => {
    const input = document.createElement('input')
    input.type = 'file'
    input.accept = '.json'
    input.onchange = e => {
      const file = e.target.files[0]
      if (!file) return
      const reader = new FileReader()
      reader.onload = e => {
        try {
          const trades = JSON.parse(e.target.result)
          const asArray = Array.isArray(trades) ? trades : [trades]
          asArray.forEach(saveTrade)
        } catch (error) {
          console.error('Error importing trades:', error)
          alert('Failed to import trades. Please check the file format.')
        }
      }
      reader.readAsText(file)
    }
    input.click()
  }

  const handleExport = () => {
    const data = JSON.stringify(trades, null, 2)
    const blob = new Blob([data], { type: 'application/json' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `trades-export-${new Date().toISOString().split('T')[0]}.json`
    a.click()
    URL.revokeObjectURL(url)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-zinc-50 to-zinc-100 dark:from-zinc-950 dark:to-zinc-900 text-zinc-900 dark:text-zinc-50">
      <div className="max-w-7xl mx-auto px-4 py-8">
        <Header 
          settings={settings} 
          updateSettings={updateSettings} 
          onImport={handleImport} 
          onExport={handleExport} 
        />
        <Divider />
        <div className="grid grid-cols-1 xl:grid-cols-12 gap-6 mt-6">
          <AppCard className="xl:col-span-3">
            <h3 className="text-lg font-semibold mb-4">Filters</h3>
            <AppSelect 
              id="month" 
              label="Month" 
              value={filterMonth} 
              onChange={(e) => setFilterMonth(e.target.value)}
              options={[
                { value: '', label: 'All' }, 
                ...monthOptions.map(m => ({ value: m, label: m }))
              ]} 
            />
            <AppInput 
              id="search" 
              label="Search" 
              placeholder="AAPL, Vertical, option..." 
              value={search} 
              onChange={(e) => setSearch(e.target.value)} 
              className="mt-3" 
            />
          </AppCard>

          <div className="xl:col-span-9 space-y-6">
            <Dashboard trades={filtered} settings={settings} />
            <AppCard>
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold">Manage Trades</h3>
                <AppButton variant="primary" onClick={() => setEditing({})}>
                  Add Trade
                </AppButton>
              </div>
              <TradesTable 
                trades={filtered} 
                onExitClick={setExiting}
                onEdit={setEditing}
                onDelete={deleteTrade} 
              />
            </AppCard>
          </div>
        </div>
      </div>

      <AnimatePresence>
        {editing && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/40 backdrop-blur-sm flex items-end md:items-center justify-center p-4 z-50"
          >
            <motion.div 
              initial={{ y: 20, opacity: 0 }} 
              animate={{ y: 0, opacity: 1 }} 
              exit={{ y: 20, opacity: 0 }}
              className="w-full max-w-2xl"
            >
              <AppCard>
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-lg font-semibold">
                    {editing.id ? 'Edit Trade' : 'New Trade'}
                  </h3>
                  <AppButton variant="ghost" onClick={() => setEditing(null)}>
                    Close
                  </AppButton>
                </div>
                {editing.id ? (
                  <EditTradeForm 
                    trade={editing} 
                    onSubmit={trade => {
                      saveTrade(trade)
                      setEditing(null)
                    }}
                    onCancel={() => setEditing(null)}
                  />
                ) : (
                  <TradeForm 
                    onSubmit={trade => {
                      saveTrade(trade)
                      setEditing(null)
                    }}
                    onCancel={() => setEditing(null)}
                  />
                )}
              </AppCard>
            </motion.div>
          </motion.div>
        )}

        {exiting && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/40 backdrop-blur-sm flex items-end md:items-center justify-center p-4 z-50"
          >
            <motion.div 
              initial={{ y: 20, opacity: 0 }} 
              animate={{ y: 0, opacity: 1 }} 
              exit={{ y: 20, opacity: 0 }}
              className="w-full max-w-2xl"
            >
              <AppCard>
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-lg font-semibold">Exit Trade</h3>
                  <AppButton variant="ghost" onClick={() => setExiting(null)}>
                    Close
                  </AppButton>
                </div>
                <ExitTradeForm
                  trade={exiting}
                  onSubmit={exit => {
                    saveTrade({ ...exiting, ...exit })
                    setExiting(null)
                  }}
                  onCancel={() => setExiting(null)}
                />
              </AppCard>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  )
}
